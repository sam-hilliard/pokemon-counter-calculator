{"version":3,"sources":["components/Heading.jsx","components/SearchResult.jsx","components/SearchResultsDropDown.jsx","components/SearchBar.jsx","components/Pokemon.jsx","components/CounterDisplay.jsx","components/TypeEffects.jsx","components/CounterResults.jsx","components/Selector.jsx","components/TypeDropDown.jsx","components/TypeSelector.jsx","components/Loading.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Heading","SearchResult","props","useState","pokeImage","setPokeImage","useEffect","axios","get","image_url","then","res","data","sprites","front_default","className","onClick","onSubmit","name","src","alt","SearchResultsDropDown","results","map","pokemon","index","url","SearchBar","query","setQuery","allPokemon","setAllPokemon","suggestedPokemon","setSuggestedPokemon","type","value","onChange","event","curQuery","target","count","startsWith","toLowerCase","prevPokemon","length","placeholder","Button","test","Pokemon","Card","Img","variant","image","Body","Title","Text","types","typeStr","forEach","obj","replace","RegExp","parseTypes","CounterDisplay","isAttack","style","width","margin","Header","counters","doubleCounters","TypeEffects","getCounters","counters2x","typeData","double_damage_from","half_damage_to","counterObj","counter","includes","Container","maxWidth","Row","xs","sm","md","Col","CounterResults","isPokemon","hasOwnProperty","error","Selector","setIsPokemon","handleChange","e","pokemonChecked","onSelect","checked","id","htmlFor","TypeDropDown","setTypes","selected","setSelected","handleClick","preventDefault","text","isMounted","catch","err","console","log","Dropdown","Toggle","Menu","Item","Divider","TypeSelector","handleSelect","tempTypes","Loading","Footer","App","baseURL","setPokemon","setTypeData","isLoading","setIsLoading","queryMade","setQueryMade","handleQuery","queryByName","queryByType","a","oldData","damage_relations","Set","choice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06688207.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../css/Heading.css';\r\n\r\nfunction Heading() {\r\n    return(\r\n        <header>\r\n            <h1>Pokemon Counter Calculator</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Heading;","import { useEffect, useState } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport '../css/SearchResult.css';\r\n\r\nexport default function SearchResult(props) {\r\n    const [pokeImage, setPokeImage] = useState({});\r\n\r\n    useEffect(() => {\r\n        axios.get(props.image_url).then(res => {\r\n            setPokeImage(res.data.sprites.front_default);\r\n        });\r\n    }, [props.image_url]);\r\n\r\n    function handleClick() {\r\n        props.onSubmit(props.name)\r\n    }\r\n\r\n    return(\r\n        <div className=\"search-result\" onClick={handleClick}>\r\n            <div className=\"poke-pic\">\r\n                <img src={pokeImage} alt={props.name} />\r\n            </div>\r\n            <div>\r\n                <p>{props.name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import SearchResult from './SearchResult';\r\n\r\nexport default function SearchResultsDropDown(props) {\r\n    return(\r\n        <div className=\"search-results\">\r\n            {props.results.map((pokemon, index) => {\r\n                return <SearchResult key={index} name={pokemon.name} image_url={pokemon.url} onSubmit={props.onSubmit} />;\r\n            })}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport axios from 'axios';\r\n\r\nimport SearchResultsDropDown from './SearchResultsDropDown';\r\n\r\nimport '../css/SearchBar.css';\r\n\r\n// used to query a pokemon by name\r\nfunction SearchBar(props) {\r\n    const [query, setQuery] = useState('');\r\n    const [allPokemon, setAllPokemon] = useState([]);\r\n    const [suggestedPokemon, setSuggestedPokemon] = useState([]);\r\n\r\n    const resultsLimit = 10;\r\n\r\n\r\n    useEffect(() => {\r\n        const baseURL = 'https://pokeapi.co/api/v2/pokemon?limit=500';\r\n        setAllPokemon([]);\r\n\r\n        axios.get(baseURL).then(res => {\r\n            setAllPokemon(res.data.results);\r\n        });\r\n\r\n    }, []);\r\n\r\n\r\n    function handleChange(event) {\r\n        let curQuery = event.target.value;\r\n        setQuery(curQuery);\r\n        setSuggestedPokemon([]);\r\n\r\n        let count = 0;\r\n        let index = 0;\r\n\r\n        while (index < allPokemon.length && count < resultsLimit) {\r\n            let pokemon = allPokemon[index];\r\n            if (pokemon.name.startsWith(curQuery.toLowerCase())) {\r\n                count++;\r\n                setSuggestedPokemon(prevPokemon => [pokemon, ...prevPokemon]);\r\n            }\r\n\r\n            index++;\r\n        }\r\n    }\r\n\r\n    function handleClick() {\r\n        if (query !== null && /\\S/.test(query)) {\r\n            props.onSubmit(query);\r\n        }\r\n        setQuery('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <input type=\"text\" value={query} onChange={handleChange} placeholder=\"Pokemon's Name\" />\r\n            {query !== '' && <SearchResultsDropDown results={suggestedPokemon} onSubmit={props.onSubmit} />}\r\n            <Button className=\"calculate-btn\" onClick={handleClick}>Calculate</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport '../css/Pokemon.css';\r\n\r\n// displays pokemon information (name, picture, type) in a card\r\nfunction Pokemon(props) {\r\n\r\n    function parseTypes(types) {\r\n        let typeStr = '';\r\n    \r\n        types.forEach(obj => {\r\n            typeStr += obj.type.name + ', ';\r\n        });\r\n    \r\n        typeStr = typeStr.replace(new RegExp(', $'), '');\r\n        return typeStr;\r\n    }\r\n\r\n    return (\r\n        <Card className=\"text-center poke-card\">\r\n            <Card.Img variant=\"top\" src={props.image} />\r\n            <Card.Body>\r\n                <Card.Title>{props.name}</Card.Title>\r\n                <Card.Text>{parseTypes(props.types)}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Pokemon;","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport '../css/CounterDisplay.css'\r\n\r\n// displays counter data in a card\r\nfunction CounterDisplay(props) {\r\n    return (\r\n        <Card className={'mb-2 ' + (props.isAttack ? 'attack' : 'defense')} style={{ width: '18rem', margin: '0 auto' }}>\r\n            <Card.Header >{props.isAttack ? 'Attack' : 'Defense'} Counters</Card.Header>\r\n            <Card.Body>\r\n            <Card.Text>\r\n                <p>{props.isAttack ? 'Super' : 'Not Very'} Effective: {props.counters}</p>\r\n                {props.doubleCounters.length > 0 && <p>2x {!props.isAttack && 'Not'} Effective: {props.doubleCounters}</p>}\r\n            </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CounterDisplay;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CounterDisplay from './CounterDisplay';\r\n\r\n// displays both attack/defense counter results \r\n// in two cards after query\r\nfunction TypeEffects(props) {\r\n\r\n    // parses gathered counter data into strings holding\r\n    // super effective and doubly effective counters\r\n    function getCounters(isAttack) {\r\n        let counters = '';\r\n        let counters2x = '';\r\n        props.typeData.forEach(type => {\r\n            let counterData = isAttack ? type.double_damage_from : type.half_damage_to;\r\n            counterData.forEach(counterObj => {\r\n                let counter = counterObj.name;\r\n                if (counters.includes(counter)) {\r\n                    counters2x += counter + ', ';\r\n                    counters.replace(counter + ', ', '');\r\n                } else {\r\n                    counters += counter +  ', ';\r\n                }\r\n            });\r\n        });\r\n\r\n        counters = counters.replace(new RegExp(', $'), '');\r\n        counters2x = counters2x.replace(new RegExp(', $'), '');\r\n        return {counters: counters, counters2x: counters2x}\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container style={{ maxWidth: '50rem' }}>\r\n                <Row xs={1} sm={1} md={2}>\r\n                    <Col>\r\n                        <CounterDisplay \r\n                            isAttack={true}\r\n                            counters={getCounters(true).counters}\r\n                            doubleCounters={getCounters(true).counters2x} \r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <CounterDisplay \r\n                            isAttack={false}\r\n                            counters={getCounters(false).counters}\r\n                            doubleCounters={getCounters(false).counters2x} \r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TypeEffects;","import React from 'react';\r\n\r\nimport Pokemon from './Pokemon';\r\nimport TypeEffects from './TypeEffects';\r\n\r\n// displays pokemon queried (if relevant) and defense/attack counters\r\nfunction CounterResults(props) {\r\n\r\n    if (props.isPokemon && props.pokemon.hasOwnProperty('error')) {\r\n        return(\r\n            <h5>{props.pokemon.error}</h5>\r\n        );\r\n    } else {\r\n        return(\r\n            <div>\r\n                {props.isPokemon && <Pokemon \r\n                    name={props.pokemon.name}\r\n                    image={props.pokemon.sprites.front_default}\r\n                    types={props.pokemon.types}\r\n                />}\r\n                <TypeEffects typeData={props.typeData} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterResults;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport '../css/Selector.css';\r\n\r\n// allows user to choose between querying by pokemon or type\r\nfunction Selector(props) {\r\n\r\n    const [isPokemon, setIsPokemon] = useState(true);\r\n\r\n    function handleChange(e) {\r\n        const pokemonChecked = e.target.value === 'pokemon';\r\n        setIsPokemon(pokemonChecked);\r\n        props.onSelect(pokemonChecked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"selector\">\r\n            <input checked={isPokemon} type=\"radio\" value=\"pokemon\" id=\"pokemon\"\r\n              onChange={handleChange} />\r\n            <label htmlFor=\"pokemon\">By Pokemon</label>\r\n\r\n            <input checked={!isPokemon} type=\"radio\" value=\"type\" id=\"type\"\r\n              onChange={handleChange} />\r\n            <label htmlFor=\"type\">By Type</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Selector;","import axios from 'axios';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\n// drop down for selecting pokemon type\r\nfunction TypeDropDown(props) {\r\n\r\n    const [types, setTypes] = useState([]);\r\n    const [selected, setSelected] = useState('none');\r\n    \r\n    // gets list of all pokemon types\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        axios.get('https://pokeapi.co/api/v2/type')\r\n            .then((res) => {\r\n                if (isMounted) {\r\n                    setTypes(res.data.results.map(type => {\r\n                        return type.name;\r\n                    }));\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n        return () => { isMounted = false};\r\n    }, []);\r\n\r\n    // replaces dropdown title with selection\r\n    function handleClick(e) {\r\n        e.preventDefault();\r\n        setSelected(e.target.text);\r\n        props.onSelect(props.name, e.target.text);\r\n    }\r\n\r\n    return (\r\n            <Dropdown className=\"drop-down\">\r\n            <Dropdown.Toggle variant=\"light\">\r\n                {selected}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={handleClick}>none</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                {types.map(type => {\r\n                    return <Dropdown.Item key={type} onClick={handleClick}>{type}</Dropdown.Item>\r\n                })}\r\n            </Dropdown.Menu>\r\n            </Dropdown>\r\n    );\r\n\r\n}\r\n\r\nexport default TypeDropDown;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport TypeDropDown from './TypeDropDown';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../css/TypeSelector.css';\r\n\r\n// allows user to choose types using two dropdowns for query\r\nfunction TypeSelector(props) {\r\n\r\n    const [types, setTypes] = useState(['none', 'none']);\r\n\r\n    function handleSelect(name, value) {\r\n        let tempTypes = types;\r\n        if (name === 'sel1') {\r\n            tempTypes[0] = value;\r\n        } else {\r\n            tempTypes[1] = value;\r\n        }\r\n\r\n        setTypes(tempTypes);\r\n    }\r\n\r\n    function handleClick() {\r\n        props.onSubmit(types);\r\n    }\r\n\r\n    return (\r\n        <div className=\"type-select\">\r\n            <div>\r\n                <TypeDropDown name=\"sel1\" onSelect={handleSelect}/>\r\n                <TypeDropDown name=\"sel2\" onSelect={handleSelect}/>\r\n            </div> \r\n            <Button className=\"calculate-btn\" onClick={handleClick}>Calculate</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TypeSelector;","import React from 'react';\r\n\r\nimport '../css/Loading.css';\r\n\r\n// loading animation displayed during processing of request\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <div className=\"loading\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\nimport '../css/Footer.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            Developed by Sam Hilliard\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport Heading from './Heading';\r\nimport SearchBar from './SearchBar';\r\nimport CounterResults from './CounterResults'\r\nimport Selector from './Selector';\r\nimport TypeSelector from './TypeSelector';\r\nimport Loading from './Loading';\r\nimport Footer from './Footer';\r\n\r\nimport '../css/App.css';\r\n\r\n// main application/parent of all components\r\nfunction App() {\r\n\r\n    const baseURL = 'https://pokeapi.co/api/v2/';\r\n    const [pokemon, setPokemon] = useState({});\r\n    const [typeData, setTypeData] = useState([]);\r\n    const [isPokemon, setIsPokemon] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [queryMade, setQueryMade] = useState(false);\r\n\r\n    // triggers when calc button clicked\r\n    function handleQuery(query) {\r\n        setIsLoading(true);\r\n\r\n        if(isPokemon) {\r\n            queryByName(query);\r\n        } else {\r\n            queryByType(query);\r\n        }\r\n    }\r\n\r\n    // triggers when user changes query type using radio buttons\r\n    function handleSelection(choice) {\r\n        setIsPokemon(choice);\r\n        setQueryMade(false);\r\n    }\r\n\r\n    // handling query based on pokemon name\r\n    async function queryByName(query) {\r\n        setTypeData([]);\r\n        await axios.get(baseURL + 'pokemon/' + query.toLowerCase()).then(res => {\r\n            setPokemon(res.data);\r\n            const typeURLs = res.data.types.map(obj => {\r\n                return obj.type.url;\r\n            });\r\n    \r\n            typeURLs.forEach(url => {\r\n                axios.get(url).then(res => {\r\n                    setTypeData(oldData => [...oldData, res.data.damage_relations]);\r\n                }).catch(() => {\r\n                    setTypeData(oldData => [...oldData, {error: `Could not find type with name, \"${query}.\"`}]);\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            setPokemon({error: `Could not find pokemon with name, \"${query}.\"`});\r\n        });\r\n\r\n        setIsLoading(false);\r\n        setQueryMade(true);\r\n    }\r\n\r\n    // handling query based on using type selection\r\n    async function queryByType(query) {\r\n        setTypeData([]);\r\n\r\n        // removing duplicates\r\n        query = [...new Set(query)];\r\n\r\n        query.forEach(type => {\r\n            if (type !== 'none') {\r\n                axios.get(baseURL + 'type/' + type).then(res => {\r\n                    setTypeData(oldData => [...oldData, res.data.damage_relations]);\r\n                }).catch(() => {\r\n                    setTypeData(oldData => [...oldData, {error: `Could not find type with name, \"${query}.\"`}]);\r\n                });\r\n            }\r\n        });\r\n        setIsLoading(false);\r\n        setQueryMade(true);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Heading />\r\n            <div className=\"centered\">\r\n                {isPokemon ? <SearchBar onSubmit={handleQuery} /> : <TypeSelector onSubmit={handleQuery}/>}\r\n                <Selector onSelect={handleSelection} />\r\n\r\n                {/* only want to render results after finished loading/query has been made */}\r\n                {!isLoading && queryMade &&\r\n                    <CounterResults \r\n                        pokemon={pokemon} \r\n                        typeData={typeData} \r\n                        isPokemon={isPokemon} \r\n                    />\r\n                }\r\n\r\n                {isLoading && <Loading />}\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}