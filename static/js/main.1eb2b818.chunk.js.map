{"version":3,"sources":["components/Heading.jsx","components/SearchBar.jsx","components/Pokemon.jsx","components/CounterDisplay.jsx","components/TypeEffects.jsx","components/CounterResults.jsx","components/Selector.jsx","components/TypeDropDown.jsx","components/TypeSelector.jsx","components/Loading.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Heading","SearchBar","props","useState","query","setQuery","className","type","value","onChange","event","target","placeholder","Button","onClick","test","onSubmit","Pokemon","Card","Img","variant","src","image","Body","Title","name","Text","types","typeStr","forEach","obj","replace","RegExp","parseTypes","CounterDisplay","isAttack","style","width","margin","Header","counters","doubleCounters","length","TypeEffects","getCounters","counters2x","typeData","double_damage_from","half_damage_to","counterObj","counter","includes","Container","maxWidth","Row","xs","sm","md","Col","CounterResults","isPokemon","pokemon","hasOwnProperty","error","sprites","front_default","Selector","setIsPokemon","handleChange","e","pokemonChecked","onSelect","checked","id","htmlFor","TypeDropDown","setTypes","selected","setSelected","handleClick","preventDefault","text","useEffect","isMounted","axios","get","then","res","data","results","map","catch","err","console","log","Dropdown","Toggle","Menu","Item","Divider","TypeSelector","handleSelect","tempTypes","Loading","Footer","App","baseURL","setPokemon","setTypeData","isLoading","setIsLoading","queryMade","setQueryMade","handleQuery","queryByName","queryByType","a","toLowerCase","url","oldData","damage_relations","Set","choice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eb2b818.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../css/Heading.css';\r\n\r\nfunction Heading() {\r\n    return(\r\n        <header>\r\n            <h1>Pokemon Counter Calculator</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../css/SearchBar.css';\r\n\r\n// used to query a pokemon by name\r\nfunction SearchBar(props) {\r\n    const [query, setQuery] = useState('');\r\n\r\n    function handleChange(event) {\r\n        setQuery(event.target.value);\r\n    }\r\n\r\n    function handleClick() {\r\n        if (query !== null && /\\S/.test(query))\r\n            props.onSubmit(query);\r\n        setQuery('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <input type=\"text\" value={query} onChange={handleChange} placeholder=\"Pokemon's Name\" />\r\n            <Button className=\"calculate-btn\" onClick={handleClick}>Calculate</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport '../css/Pokemon.css';\r\n\r\n// displays pokemon information (name, picture, type) in a card\r\nfunction Pokemon(props) {\r\n\r\n    function parseTypes(types) {\r\n        let typeStr = '';\r\n    \r\n        types.forEach(obj => {\r\n            typeStr += obj.type.name + ', ';\r\n        });\r\n    \r\n        typeStr = typeStr.replace(new RegExp(', $'), '');\r\n        return typeStr;\r\n    }\r\n\r\n    return (\r\n        <Card className=\"text-center poke-card\">\r\n            <Card.Img variant=\"top\" src={props.image} />\r\n            <Card.Body>\r\n                <Card.Title>{props.name}</Card.Title>\r\n                <Card.Text>{parseTypes(props.types)}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Pokemon;","import React from 'react';\r\n\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport '../css/CounterDisplay.css'\r\n\r\n// displays counter data in a card\r\nfunction CounterDisplay(props) {\r\n    return (\r\n        <Card className={'mb-2 ' + (props.isAttack ? 'attack' : 'defense')} style={{ width: '18rem', margin: '0 auto' }}>\r\n            <Card.Header >{props.isAttack ? 'Attack' : 'Defense'} Counters</Card.Header>\r\n            <Card.Body>\r\n            <Card.Text>\r\n                <p>{props.isAttack ? 'Super' : 'Not Very'} Effective: {props.counters}</p>\r\n                {props.doubleCounters.length > 0 && <p>2x {!props.isAttack && 'Not'} Effective: {props.doubleCounters}</p>}\r\n            </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CounterDisplay;","import React from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CounterDisplay from './CounterDisplay';\r\n\r\n// displays both attack/defense counter results \r\n// in two cards after query\r\nfunction TypeEffects(props) {\r\n\r\n    // parses gathered counter data into strings holding\r\n    // super effective and doubly effective counters\r\n    function getCounters(isAttack) {\r\n        let counters = '';\r\n        let counters2x = '';\r\n        props.typeData.forEach(type => {\r\n            let counterData = isAttack ? type.double_damage_from : type.half_damage_to;\r\n            counterData.forEach(counterObj => {\r\n                let counter = counterObj.name;\r\n                if (counters.includes(counter)) {\r\n                    counters2x += counter + ', ';\r\n                    counters.replace(counter + ', ', '');\r\n                } else {\r\n                    counters += counter +  ', ';\r\n                }\r\n            });\r\n        });\r\n\r\n        counters = counters.replace(new RegExp(', $'), '');\r\n        counters2x = counters2x.replace(new RegExp(', $'), '');\r\n        return {counters: counters, counters2x: counters2x}\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container style={{ maxWidth: '50rem' }}>\r\n                <Row xs={1} sm={1} md={2}>\r\n                    <Col>\r\n                        <CounterDisplay \r\n                            isAttack={true}\r\n                            counters={getCounters(true).counters}\r\n                            doubleCounters={getCounters(true).counters2x} \r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <CounterDisplay \r\n                            isAttack={false}\r\n                            counters={getCounters(false).counters}\r\n                            doubleCounters={getCounters(false).counters2x} \r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TypeEffects;","import React from 'react';\r\n\r\nimport Pokemon from './Pokemon';\r\nimport TypeEffects from './TypeEffects';\r\n\r\n// displays pokemon queried (if relevant) and defense/attack counters\r\nfunction CounterResults(props) {\r\n\r\n    if (props.isPokemon && props.pokemon.hasOwnProperty('error')) {\r\n        return(\r\n            <h5>{props.pokemon.error}</h5>\r\n        );\r\n    } else {\r\n        return(\r\n            <div>\r\n                {props.isPokemon && <Pokemon \r\n                    name={props.pokemon.name}\r\n                    image={props.pokemon.sprites.front_default}\r\n                    types={props.pokemon.types}\r\n                />}\r\n                <TypeEffects typeData={props.typeData} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterResults;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport '../css/Selector.css';\r\n\r\n// allows user to choose between querying by pokemon or type\r\nfunction Selector(props) {\r\n\r\n    const [isPokemon, setIsPokemon] = useState(true);\r\n\r\n    function handleChange(e) {\r\n        const pokemonChecked = e.target.value === 'pokemon';\r\n        setIsPokemon(pokemonChecked);\r\n        props.onSelect(pokemonChecked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"selector\">\r\n            <input checked={isPokemon} type=\"radio\" value=\"pokemon\" id=\"pokemon\"\r\n              onChange={handleChange} />\r\n            <label htmlFor=\"pokemon\">By Pokemon</label>\r\n\r\n            <input checked={!isPokemon} type=\"radio\" value=\"type\" id=\"type\"\r\n              onChange={handleChange} />\r\n            <label htmlFor=\"type\">By Type</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Selector;","import axios from 'axios';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\n// drop down for selecting pokemon type\r\nfunction TypeDropDown(props) {\r\n\r\n    const [types, setTypes] = useState([]);\r\n    const [selected, setSelected] = useState('none');\r\n    \r\n    // gets list of all pokemon types\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        axios.get('https://pokeapi.co/api/v2/type')\r\n            .then((res) => {\r\n                if (isMounted) {\r\n                    setTypes(res.data.results.map(type => {\r\n                        return type.name;\r\n                    }));\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n            });\r\n        return () => { isMounted = false};\r\n    }, []);\r\n\r\n    // replaces dropdown title with selection\r\n    function handleClick(e) {\r\n        e.preventDefault();\r\n        setSelected(e.target.text);\r\n        props.onSelect(props.name, e.target.text);\r\n    }\r\n\r\n    return (\r\n            <Dropdown className=\"drop-down\">\r\n            <Dropdown.Toggle variant=\"light\">\r\n                {selected}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={handleClick}>none</Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                {types.map(type => {\r\n                    return <Dropdown.Item key={type} onClick={handleClick}>{type}</Dropdown.Item>\r\n                })}\r\n            </Dropdown.Menu>\r\n            </Dropdown>\r\n    );\r\n\r\n}\r\n\r\nexport default TypeDropDown;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport TypeDropDown from './TypeDropDown';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../css/TypeSelector.css';\r\n\r\n// allows user to choose types using two dropdowns for query\r\nfunction TypeSelector(props) {\r\n\r\n    const [types, setTypes] = useState(['none', 'none']);\r\n\r\n    function handleSelect(name, value) {\r\n        let tempTypes = types;\r\n        if (name === 'sel1') {\r\n            tempTypes[0] = value;\r\n        } else {\r\n            tempTypes[1] = value;\r\n        }\r\n\r\n        setTypes(tempTypes);\r\n    }\r\n\r\n    function handleClick() {\r\n        props.onSubmit(types);\r\n    }\r\n\r\n    return (\r\n        <div className=\"type-select\">\r\n            <div>\r\n                <TypeDropDown name=\"sel1\" onSelect={handleSelect}/>\r\n                <TypeDropDown name=\"sel2\" onSelect={handleSelect}/>\r\n            </div> \r\n            <Button className=\"calculate-btn\" onClick={handleClick}>Calculate</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TypeSelector;","import React from 'react';\r\n\r\nimport '../css/Loading.css';\r\n\r\n// loading animation displayed during processing of request\r\nfunction Loading() {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <div className=\"loading\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\nimport '../css/Footer.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            Developed by Sam Hilliard\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport Heading from './Heading';\r\nimport SearchBar from './SearchBar';\r\nimport CounterResults from './CounterResults'\r\nimport Selector from './Selector';\r\nimport TypeSelector from './TypeSelector';\r\nimport Loading from './Loading';\r\nimport Footer from './Footer';\r\n\r\nimport '../css/App.css';\r\n\r\n// main application/parent of all components\r\nfunction App() {\r\n\r\n    const baseURL = 'https://pokeapi.co/api/v2/';\r\n    const [pokemon, setPokemon] = useState({});\r\n    const [typeData, setTypeData] = useState([]);\r\n    const [isPokemon, setIsPokemon] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [queryMade, setQueryMade] = useState(false);\r\n\r\n    // triggers when calc button clicked\r\n    function handleQuery(query) {\r\n        setIsLoading(true);\r\n\r\n        if(isPokemon) {\r\n            queryByName(query);\r\n        } else {\r\n            queryByType(query);\r\n        }\r\n    }\r\n\r\n    // triggers when user changes query type using radio buttons\r\n    function handleSelection(choice) {\r\n        setIsPokemon(choice);\r\n        setQueryMade(false);\r\n    }\r\n\r\n    // handling query based on pokemon name\r\n    async function queryByName(query) {\r\n        setTypeData([]);\r\n        await axios.get(baseURL + 'pokemon/' + query.toLowerCase()).then(res => {\r\n            setPokemon(res.data);\r\n            const typeURLs = res.data.types.map(obj => {\r\n                return obj.type.url;\r\n            });\r\n    \r\n            typeURLs.forEach(url => {\r\n                axios.get(url).then(res => {\r\n                    setTypeData(oldData => [...oldData, res.data.damage_relations]);\r\n                }).catch(() => {\r\n                    setTypeData(oldData => [...oldData, {error: `Could not find type with name, \"${query}.\"`}]);\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            setPokemon({error: `Could not find pokemon with name, \"${query}.\"`});\r\n        });\r\n\r\n        setIsLoading(false);\r\n        setQueryMade(true);\r\n    }\r\n\r\n    // handling query based on using type selection\r\n    async function queryByType(query) {\r\n        setTypeData([]);\r\n\r\n        // removing duplicates\r\n        query = [...new Set(query)];\r\n\r\n        query.forEach(type => {\r\n            if (type !== 'none') {\r\n                axios.get(baseURL + 'type/' + type).then(res => {\r\n                    setTypeData(oldData => [...oldData, res.data.damage_relations]);\r\n                }).catch(() => {\r\n                    setTypeData(oldData => [...oldData, {error: `Could not find type with name, \"${query}.\"`}]);\r\n                });\r\n            }\r\n        });\r\n        setIsLoading(false);\r\n        setQueryMade(true);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Heading />\r\n            <Container className=\"centered\">\r\n                {isPokemon ? <SearchBar onSubmit={handleQuery} /> : <TypeSelector onSubmit={handleQuery}/>}\r\n                <Selector onSelect={handleSelection} />\r\n\r\n                {/* only want to render results after finished loading/query has been made */}\r\n                {!isLoading && queryMade &&\r\n                    <CounterResults \r\n                        pokemon={pokemon} \r\n                        typeData={typeData} \r\n                        isPokemon={isPokemon} \r\n                    />\r\n                }\r\n\r\n                {isLoading && <Loading />}\r\n            </Container>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}